This file contains hints that don't give you the solution, but point you in the
right direction.

Reload this file after moving to the next step, for further hints.

// @BEGIN_VERSION_ONLY GATHER_WORDS_SPACE
Hello Gather Words
------------------------
string.split(" ")
// @END_VERSION_ONLY GATHER_WORDS_SPACE
// @BEGIN_VERSION_ONLY GATHER_WORDS_WHITESPACE
Gather Words, Whitespace
------------------------
string.split("\\s+")

Remember to filter!
// @END_VERSION_ONLY GATHER_WORDS_WHITESPACE
// @BEGIN_VERSION_ONLY GATHER_WORDS_PUNCTUATION
Gather Words, Remove Punctuation
--------------------------------
No hints yet.
// @END_VERSION_ONLY GATHER_WORDS_PUNCTUATION
// @BEGIN_VERSION_ONLY GATHER_WORDS_LOWERCASE
Gather Words, Ignore Case
-------------------------
No hints yet.
// @END_VERSION_ONLY GATHER_WORDS_LOWERCASE
// @BEGIN_VERSION_ONLY COUNT_WORDS
Count Words
-----------
This is the pseudo-code for counting stuff in a collection:

    (fold (function [counts x]
      	        (assoc counts x (inc (get counts x 0))))
          {}
          coll))

'counts' is a Map that accumulates the counts.
'x' will be each element in 'coll'.
{} is an empty Map used as the initial value.

Get the value of x from the Map counts, or zero if no x in counts:
	(get counts x 0)

Increase it by one:
	(inc (get counts x 0))

Associate to the key 'x', in the Map 'counts', the above number as the value:
    (assoc counts x (inc (get counts x 0)))
// @END_VERSION_ONLY COUNT_WORDS
// @BEGIN_VERSION_ONLY SORT_COUNTED_WORDS
Sort Counted Words
------------------
Transform the Map to a collection of Maps, then sort.
// @END_VERSION_ONLY SORT_COUNTED_WORDS
// @BEGIN_VERSION_ONLY REPEAT_STR
Repeat String
-------------
StringBuilder
// @END_VERSION_ONLY REPEAT_STR
// @BEGIN_VERSION_ONLY HISTOGRAM_ENTRY
Histogram Entry
---------------
sprintf("%-7.7s %d", word, count)
// @END_VERSION_ONLY HISTOGRAM_ENTRY
// @BEGIN_VERSION_ONLY HISTOGRAM
Histogram
---------
No hints yet.
// @END_VERSION_ONLY HISTOGRAM