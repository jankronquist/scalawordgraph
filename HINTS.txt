This file contains hints that don't give you the solution, but point you in the
right direction.

Reload this file after moving to the next step, for further hints.

// @BEGIN_VERSION_ONLY REPEAT_STR
Repeat String
-------------
Notice that you can use inner functions in Scala.
// @END_VERSION_ONLY REPEAT_STR
// @BEGIN_VERSION_ONLY GATHER_WORDS_SPACE
Hello Gather Words
------------------------
string.split(" ")
// @END_VERSION_ONLY GATHER_WORDS_SPACE
// @BEGIN_VERSION_ONLY GATHER_WORDS_WHITESPACE
Gather Words, Whitespace
------------------------
string.split("\\s+")

Remember to filter!
// @END_VERSION_ONLY GATHER_WORDS_WHITESPACE
// @BEGIN_VERSION_ONLY GATHER_WORDS_PUNCTUATION
Gather Words, Remove Punctuation
--------------------------------
string.split("\\W+")
// @END_VERSION_ONLY GATHER_WORDS_PUNCTUATION
// @BEGIN_VERSION_ONLY GATHER_WORDS_LOWERCASE
Gather Words, Ignore Case
-------------------------
Use map and toLowerCase
// @END_VERSION_ONLY GATHER_WORDS_LOWERCASE
// @BEGIN_VERSION_ONLY COUNT_WORDS
Count Words
-----------
The result we want has the type Map[String, Int]. This means that the
starting value of the foldLeft must be an empty Map. 

The function we need has the following signature:

wordCountAdder(wordsWithCount: Map[String, Int], word: String): Map[String, Int] 

How to use a Map? 
http://stackoverflow.com/questions/949419/scala-collection-map-cannot-be-added-to

// @END_VERSION_ONLY COUNT_WORDS
// @BEGIN_VERSION_ONLY SORT_COUNTED_WORDS
Sort Counted Words
------------------
List has a sort method. The method signature you are looking for is:

byCount(word1: (String, Int), word2: (String, Int)) : Boolean
// @END_VERSION_ONLY SORT_COUNTED_WORDS
// @BEGIN_VERSION_ONLY HISTOGRAM_ENTRY
Histogram Entry
---------------
sprintf("%-7.7s %d", word, count)
// @END_VERSION_ONLY HISTOGRAM_ENTRY
// @BEGIN_VERSION_ONLY HISTOGRAM
Histogram
---------
map, foldLeft and mkString are useful.
// @END_VERSION_ONLY HISTOGRAM